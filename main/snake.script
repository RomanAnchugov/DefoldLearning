local function put_food(self)
	if not self.active then
		self.food = {x = math.random(2, 30), y = math.random(2, 30)} 
		tilemap.set_tile("#grid", "layer1", self.food.x, self.food.y, 3)	
	else
	for i = 1, 100 do
		self.food = {x = math.random(2, 47), y = math.random(2, 47)} 
		print(self.food.x .. " " .. self.food.y)
		tilemap.set_tile("#grid", "layer1", self.food.x, self.food.y, 3)
	end
	end

end

function init(self)

	msg.post(".", "acquire_input_focus")
	self.active = false
	self.segments = {
		{x = 7, y = 24},
		{x = 8, y = 24},
		{x = 9, y = 24},
		{x = 10, y = 24} } 
		self.dir = {x = 1, y = 0} 
		self.speed = 7.0 
		self.alive = true
		self.t = 0 

		math.randomseed(socket.gettime()) 
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	if self.active then
	self.t = self.t + dt 
	if self.t >= 1.0 / self.speed then         
		local head = self.segments[#self.segments] 
		local newhead = {x = head.x + self.dir.x, y = head.y + self.dir.y} 

		table.insert(self.segments, newhead) 

		local tile = tilemap.get_tile("#grid", "layer1", newhead.x, newhead.y)
		
		if tile == 3 then
			self.speed = self.speed + 1 
			put_food(self)
		else 
			local tail = table.remove(self.segments, 1) 
			tilemap.set_tile("#grid", "layer1", tail.x, tail.y, 1)
		end

		for i, s in ipairs(self.segments) do 
			tilemap.set_tile("#grid", "layer1", s.x, s.y, 2) 
		end

		self.t = 0 
	end
end
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	
	if action_id == hash("up") and action.pressed then 
		self.dir.x = 0 
		self.dir.y = 1
	elseif action_id == hash("down") and action.pressed then
		self.dir.x = 0
		self.dir.y = -1
	elseif action_id == hash("left") and action.pressed then
		self.dir.x = -1
		self.dir.y = 0
	elseif action_id == hash("right") and action.pressed then
		self.dir.x = 1
		self.dir.y = 0
	
		if not self.active then
			put_food(self)
			self.active = true
		end
	end 
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
